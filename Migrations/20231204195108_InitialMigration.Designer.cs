// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projecto_bases_de_datos_api.Models;

#nullable disable

namespace projecto_bases_de_datos_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231204195108_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.Building", b =>
                {
                    b.Property<int>("BuildingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BuildingID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingRecord", b =>
                {
                    b.Property<int>("ParkingRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParkingSpotID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ParkingRecordID");

                    b.HasIndex("ParkingSpotID");

                    b.HasIndex("UserID");

                    b.HasIndex("VehicleID");

                    b.ToTable("ParkingRecords");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingSpot", b =>
                {
                    b.Property<int>("ParkingSpotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuildingID")
                        .HasColumnType("int");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ParkingSpotID");

                    b.HasIndex("BuildingID");

                    b.ToTable("ParkingSpots");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingSpotAssignment", b =>
                {
                    b.Property<int>("ParkingSpotID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParkingSpotAssignmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ParkingSpotID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ParkingSpotAssignments");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuildingID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("VehicleID");

                    b.HasIndex("UserID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingRecord", b =>
                {
                    b.HasOne("projecto_bases_de_datos_api.Models.ParkingSpot", "ParkingSpot")
                        .WithMany()
                        .HasForeignKey("ParkingSpotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projecto_bases_de_datos_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projecto_bases_de_datos_api.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingSpot");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingSpot", b =>
                {
                    b.HasOne("projecto_bases_de_datos_api.Models.Building", "Building")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingSpotAssignment", b =>
                {
                    b.HasOne("projecto_bases_de_datos_api.Models.ParkingSpot", "ParkingSpot")
                        .WithMany("ParkingSpotAssignments")
                        .HasForeignKey("ParkingSpotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projecto_bases_de_datos_api.Models.User", "User")
                        .WithMany("ParkingSpotAssignments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingSpot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.Vehicle", b =>
                {
                    b.HasOne("projecto_bases_de_datos_api.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.Building", b =>
                {
                    b.Navigation("ParkingSpots");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.ParkingSpot", b =>
                {
                    b.Navigation("ParkingSpotAssignments");
                });

            modelBuilder.Entity("projecto_bases_de_datos_api.Models.User", b =>
                {
                    b.Navigation("ParkingSpotAssignments");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
